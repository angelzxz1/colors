export default function addHexColor(c1: string, c2: string) {
  // const octetsRegex = /^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i;
  // const m1 = c1.match(octetsRegex);
  // const m2 = c2.match(octetsRegex);
  // console.log(c1," ",c2)
  // if (!m1 || !m2) {
  //   throw new Error(`invalid hex color triplet(s): ${c1} / ${c2}`);
  // }
  return [1, 2, 3]
    .map((i) => {
      const sum = parseInt(c1[i], 16) + parseInt(c2[i], 16);
      if (sum > 0xff) {
        throw new Error(
          `octet ${i} overflow: ${c1[i]}+${c2[i]}=${sum.toString(16)}`
        );
      }
      return sum.toString(16).padStart(2, "0");
    })
    .join("");
}

/**
 * This method will generate a color scheme based on the provided color.
 * The color scheme will be an array of 10 colors.
 * The first color will be the provided color.
 * The next 9 colors will be generated by adding a hex color to the previous color.
 * @param color The color to generate the color scheme from.
 * @returns The color scheme.
 * @throws Error if the provided color is not a valid hex color.
 * 
 */
export function generateColorScheme(color: string): string[] {
  const colorScheme: string[] = [];
  let currentColor = color;
  colorScheme.push(currentColor);
  for (let i = 0; i < 9; i++) {
    currentColor = addHexColor(currentColor, "333333");
    colorScheme.push(currentColor);
  }
  return colorScheme;
}

/**
 * This method will generate a color scheme based on the provided color.
 * The color scheme will be an array of 10 colors.
 * The sixth color will be the provided color.
 * The first 5 colors will be generated by subtracting a hex color from the sixth color.
 * The last 4 colors will be generated by adding a hex color to the sixth color.
 * @param color The color to generate the color scheme from.
 * @returns The color scheme.
 * @throws Error if the provided color is not a valid hex color.
 */
export function generateColorScheme2(color: string): string[] {
  const colorScheme: string[] = [];
  let currentColor = color;
  for (let i = 0; i < 5; i++) {
    currentColor = addHexColor(currentColor, "#333333");
    colorScheme.push(currentColor);
  }
  colorScheme.push(color);
  currentColor = color;
  for (let i = 0; i < 4; i++) {
    currentColor = addHexColor(currentColor, "#333333");
    colorScheme.push(currentColor);
  }
  return colorScheme;
}