export default function addHexColor(c1: string, c2: string) {
  // const octetsRegex = /^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i;
  // const m1 = c1.match(octetsRegex);
  // const m2 = c2.match(octetsRegex);
  // console.log(c1," ",c2)
  // if (!m1 || !m2) {
  //   throw new Error(`invalid hex color triplet(s): ${c1} / ${c2}`);
  // }
}

const generator = (color: string, amount: number) => {
  const numColor = parseInt(color.slice(1), 16);
  const color4 = numColor + 1184268;
  const lowestColor = color4 - 672909;
  const higestColor = numColor + 8014612;
  const lowRange = [
    lowestColor,
    lowestColor + Math.floor(672909 / 4),
    lowestColor + Math.floor(672909 / 2),
    lowestColor + Math.floor(672909 / 4) * 3,
    color4,
  ];

  /**
   * necesito
   */
};

/**
 * This method will generate a color scheme based on the provided color.
 * The color scheme will be an array of 10 colors.
 * The first color will be the provided color.
 * The next 9 colors will be generated by adding a hex color to the previous color.
 * @param color The color to generate the color scheme from.
 * @returns The color scheme.
 * @throws Error if the provided color is not a valid hex color.
 *
 */
export function generateColorScheme(color: string): string[] {
  const colorScheme: string[] = [];
  let currentColor = color;
  colorScheme.push(currentColor);
  for (let i = 0; i < 9; i++) {
    currentColor = addHexColor(currentColor, "333333");
    colorScheme.push(currentColor);
  }
  return colorScheme;
}

/**
 * This method will generate a color scheme based on the provided color.
 * The color scheme will be an array of 10 colors.
 * The sixth color will be the provided color.
 * The first 5 colors will be generated by subtracting a hex color from the sixth color.
 * The last 4 colors will be generated by adding a hex color to the sixth color.
 * @param color The color to generate the color scheme from.
 * @returns The color scheme.
 * @throws Error if the provided color is not a valid hex color.
 */
export function generateColorScheme2(color: string): string[] {
  const colorScheme: string[] = [];
  let currentColor = color;
  for (let i = 0; i < 5; i++) {
    currentColor = addHexColor(currentColor, "#333333");
    colorScheme.push(currentColor);
  }
  colorScheme.push(color);
  currentColor = color;
  for (let i = 0; i < 4; i++) {
    currentColor = addHexColor(currentColor, "#333333");
    colorScheme.push(currentColor);
  }
  return colorScheme;
}
